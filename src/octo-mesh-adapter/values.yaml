# Default values for octoMeshAdapter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Tenant id the adapter is executing
tenantId: ""

# Runtime id of adapter in database
adapterRtId: ""
  
# The communication controller service uri
communicationControllerServiceUri: ""

# The public uri of the adapter
publicUri: ""

# The unique instance prefix of the OctoMesh installation.
instancePrefix: ""

secrets:
  databaseUser: ""
  databaseAdmin: ""
  streamDataPassword: ""  
  rabbitmq: ""
  # content of the root ca certificate chain
  rootCa: ""

clusterDependencies:
  mongodbHost: "octo-mongodb-0.octo-mongodb-svc.mongodb.svc.cluster.local:27017,octo-mongodb-1.octo-mongodb-svc.mongodb.svc.cluster.local:27017,octo-mongodb-2.octo-mongodb-svc.mongodb.svc.cluster.local:27017"
  rabbitMqHost: "rabbitmq.rabbitmq.svc.cluster.local"
  rabbitMqUser: "octo-mq-user"
  streamDataHost: "crate-octo-crate.cratedb.svc.cluster.local"
  streamDataUser: "octo-system"

image:
  repository: meshmakers/octo-mesh-adapter
  pullPolicy: IfNotPresent
  # private registry to pull images from
  privateRegistry: ""
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#livenessProbe:
#  httpGet:
#    path: /
#    port: http
#readinessProbe:
#  httpGet:
#    path: /
#    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  tls: false
  tlsExtra: []
#  tlsExtra:
#    - hosts:
#        - "*.example.com"
#      secretName: example-com-certificate