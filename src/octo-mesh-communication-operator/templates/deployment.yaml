apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "octoMeshCommunicationOperator.labels" . | nindent 4 }}
  name: {{ include "octoMeshCommunicationOperator.fullname" . }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{- include "octoMeshCommunicationOperator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}      
      labels:
        {{- include "octoMeshCommunicationOperator.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.secrets.rootCa }}
      # InitContainer to update CA certificates
      initContainers:
        - name: update-ca-certs
          image: alpine:latest
          command:
            - sh
            - -c
            - |
              echo "=== Alpine CA Certificate Setup ==="
              echo "Installing CA certificates package..."
              apk add --no-cache ca-certificates

              echo "Creating CA certificates directory..."
              mkdir -p /usr/local/share/ca-certificates/

              echo "Splitting CA bundle into individual certificates..."
              cd /usr/local/share/ca-certificates/

              # Split the CA bundle into individual certificates using awk
              awk '
              BEGIN { cert_count = 0 }
              /-----BEGIN CERTIFICATE-----/ {
              cert_count++
              filename = sprintf("meshmakers-%02d.crt", cert_count)
              print "Extracting certificate " cert_count " to " filename
              }
              /-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/ {
              if (filename) print > filename
              }
              /-----END CERTIFICATE-----/ {
              close(filename)
              filename = ""
              }
              ' /mounted-certs/root-ca.pem

              echo "Individual certificates created:"
              ls -la /usr/local/share/ca-certificates/meshmakers-*.crt

              echo "Updating CA certificates..."
              update-ca-certificates

              echo "Verifying CA certificate integration..."
              if [ -f /etc/ssl/certs/ca-certificates.crt ]; then
              cert_count=$(grep -c "BEGIN CERTIFICATE" /etc/ssl/certs/ca-certificates.crt)
              echo "✓ Total certificates in bundle: $cert_count"
              fi

              echo "Copying updated bundle to shared volume..."
              cp /etc/ssl/certs/ca-certificates.crt /shared-certs/ca-certificates.crt
              cp -r /etc/ssl/certs/ /shared-certs/

              echo "✓ CA certificates updated for Alpine successfully"
          volumeMounts:
            - name: custom-ca-certs
              mountPath: /mounted-certs
              readOnly: true
            - name: updated-ca-certs
              mountPath: /shared-certs
      {{- end }}
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: {{ printf "%s-webhook-config" (include "octoMeshCommunicationOperator.fullname" .) }}
        {{- if .Values.image.privateRegistry }}
        image: "{{ .Values.image.privateRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- else }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}        
        ports:
        - containerPort: {{ .Values.pod.httpPort }}
          name: http
        - containerPort: {{ .Values.pod.httpsPort }}
          name: https
        {{- with .Values.livenessProbe}}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.readinessProbe}}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.resources}}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}        
        volumeMounts:
        - mountPath: /certs
          name: certificates
          readOnly: true
        - mountPath: /ca
          name: ca-certificates
          readOnly: true
        {{- with .Values.volumeMounts }}
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- if .Values.secrets.rootCa }}
        - name: updated-ca-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        {{- end }}
      terminationGracePeriodSeconds: 10
      volumes:
      - name: certificates
        secret:
          secretName: {{ printf "%s-webhook-cert" (include "octoMeshCommunicationOperator.fullname" .) }}
      - name: ca-certificates
        secret:
          secretName: {{ printf "%s-webhook-ca" (include "octoMeshCommunicationOperator.fullname" .) }}
      {{- if .Values.secrets.rootCa }}
      - name: custom-ca-certs
        secret:
          secretName: {{ printf "%s-ca" (include "octoMeshCommunicationOperator.fullname" .) }}
      - name: updated-ca-certs
        emptyDir: {}
      {{- end }}
    {{- with .Values.volumes }}
      {{- toYaml . | nindent 8 }}
    {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
