{{- include "checkMandatoryValue" (dict "name" "services.identity.publicUri" "value" .Values.services.identity.publicUri) }}
{{- if .Values.services.assetRepository.deploy -}}  
{{- include "checkMandatoryValue" (dict "name" "services.assetRepository.publicUri" "value" .Values.services.assetRepository.publicUri) }}
{{- end }}
{{- if .Values.services.bot.deploy -}}
{{- include "checkMandatoryValue" (dict "name" "services.bot.publicUri" "value" .Values.services.bot.publicUri) }}
{{- end }}
{{- if .Values.services.communication.deploy -}}
{{- include "checkMandatoryValue" (dict "name" "services.communication.publicUri" "value" .Values.services.communication.publicUri) }}
{{- end }}
{{- if .Values.services.adminPanel.deploy -}}
{{- include "checkMandatoryValue" (dict "name" "services.adminPanel.publicUri" "value" .Values.services.adminPanel.publicUri) }}
{{- end }}

{{- $global := . -}}
{{- range $key, $svc := .Values.services }}
{{ if $svc.deploy -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "octo-mesh.service-fullname" (dict "global" $global "name" $key "svc" $svc)  }}
  labels:
    {{- include "octo-mesh.service-selectorLabels" (dict "global" $global "name" $key "svc" $svc)  | nindent 4 }}
spec:
  replicas: {{ $svc.replicaCount }}
  selector:
    matchLabels:
      {{- include "octo-mesh.service-selectorLabels" (dict "global" $global "name" $key "svc" $svc) | nindent 6 }}
  template:
    metadata:
      {{- with $svc.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "octo-mesh.service-labels" (dict "global" $global "name" $key "svc" $svc) | nindent 8 }}
        {{- with $svc.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $global.Values.imageDefaults.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $global.Values.secrets.rootCa }}
      # InitContainer to update CA certificates
      initContainers:
        - name: update-ca-certs
          image: alpine:latest
          command:
            - sh
            - -c
            - |
              echo "=== Alpine CA Certificate Setup ==="
              echo "Installing CA certificates package..."
              apk add --no-cache ca-certificates

              echo "Creating CA certificates directory..."
              mkdir -p /usr/local/share/ca-certificates/

              echo "Splitting CA bundle into individual certificates..."
              cd /usr/local/share/ca-certificates/

              # Split the CA bundle into individual certificates using awk
              awk '
              BEGIN { cert_count = 0 }
              /-----BEGIN CERTIFICATE-----/ {
              cert_count++
              filename = sprintf("meshmakers-%02d.crt", cert_count)
              print "Extracting certificate " cert_count " to " filename
              }
              /-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/ {
              if (filename) print > filename
              }
              /-----END CERTIFICATE-----/ {
              close(filename)
              filename = ""
              }
              ' /mounted-certs/root-ca.pem

              echo "Individual certificates created:"
              ls -la /usr/local/share/ca-certificates/meshmakers-*.crt

              echo "Updating CA certificates..."
              update-ca-certificates

              echo "Verifying CA certificate integration..."
              if [ -f /etc/ssl/certs/ca-certificates.crt ]; then
              cert_count=$(grep -c "BEGIN CERTIFICATE" /etc/ssl/certs/ca-certificates.crt)
              echo "✓ Total certificates in bundle: $cert_count"
              fi

              echo "Copying updated bundle to shared volume..."
              cp /etc/ssl/certs/ca-certificates.crt /shared-certs/ca-certificates.crt
              cp -r /etc/ssl/certs/ /shared-certs/

              echo "✓ CA certificates updated for Alpine successfully"
          volumeMounts:
            - name: custom-ca-certs
              mountPath: /mounted-certs
              readOnly: true
            - name: updated-ca-certs
              mountPath: /shared-certs
      {{- end }}
      containers:
      - name: {{ $key | lower }}
        {{- if $global.Values.imageDefaults.privateRegistry }}
        image: "{{ $global.Values.imageDefaults.privateRegistry }}/{{ $svc.image.repository }}:{{ $svc.image.tag | default $global.Values.appVersion | default $global.Chart.AppVersion }}"
        {{- else }}
        image: "{{ $svc.image.repository }}:{{ $svc.image.tag | default $global.Values.appVersion | default $global.Chart.AppVersion }}"
        {{- end }}
        imagePullPolicy: {{ $global.Values.imageDefaults.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ $svc.pod.port }}
            protocol: TCP
        env:
          {{- include "octo-mesh.env" (dict "global" $global "name" $key "svc" $svc) | nindent 8 }}
        {{- with $svc.pod.livenessProbe}}            
        livenessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with $svc.pod.readinessProbe}}
        readinessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with $svc.pod.resources}}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- if or $svc.signingKey $svc.pod.volumeMounts $global.Values.secrets.rootCa }}
        volumeMounts:
        {{- end }}
        {{- with $svc.pod.volumeMounts }}
          {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- if $svc.signingKey }}
        - name: signin-key-volume
          mountPath: /etc/octo-identity
        {{- end }}           
        {{- if $global.Values.secrets.rootCa }}
        - name: updated-ca-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        {{- end }}
      {{- if or $svc.signingKey $svc.pod.volumes $global.Values.secrets.rootCa }}
      volumes:
      {{- end }}        
      {{- with $svc.pod.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $svc.signingKey }}
      - name: signin-key-volume
        secret:
          secretName: {{ printf "%s-signing-key" (include "octo-mesh.fullname" $global) }}
      {{- end }}
      {{- if $global.Values.secrets.rootCa }}
      - name: custom-ca-certs
        secret:
          secretName: {{ printf "%s-ca" (include "octo-mesh.fullname" $global) }}
      - name: updated-ca-certs
        emptyDir: {}
      {{- end }}
      {{- with $svc.pod.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $svc.pod.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $svc.pod.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---

{{- end }}
{{- end }}