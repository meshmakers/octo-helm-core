## Default values for octo-mesh.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

# Override of common names
nameOverride: ""

# Override for tag version of images
appVersion: ""

imageDefaults:
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  # private registry to pull images from
  privateRegistry: ""
  
secrets:
  databaseUser: ""
  databaseAdmin: ""
  streamDataPassword: ""
  rabbitmq: ""
  # content of the root ca certificate chain
  rootCa: ""

clusterDependencies:
  mongodbHost: "octo-mongodb-0.octo-mongodb-svc.mongodb.svc.cluster.local:27017,octo-mongodb-1.octo-mongodb-svc.mongodb.svc.cluster.local:27017,octo-mongodb-2.octo-mongodb-svc.mongodb.svc.cluster.local:27017"
  rabbitMqHost: "rabbitmq.rabbitmq.svc.cluster.local"
  rabbitMqUser: "octo-mq-user"
  streamDataHost: "crate-octo-crate.cratedb.svc.cluster.local"
  streamDataUser: "octo-system"

externalUris:
  # URI of CrateDB to be used by the services
  crateDb: ""
  # URI of the Grafana to be used by the services
  grafana: ""
  # URI of the mesh adapter to be used by the services
  meshAdapter: ""
  
serviceDefaults:
  type: ClusterIP
  port: 80
  systemDatabaseName: "OctoSystem"
  # The unique instance prefix of the OctoMesh installation.
  instancePrefix: ""

ingress:
  enabled: true
  className: nginx
  annotations:
    # set to allow uploads of big rt model files using import rt function
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    # set to prevent "upstream sent too big header while reading response header from upstream"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
  tls: false
  tlsExtra: []
#  tlsExtra:
#    - hosts:
#        - "*.example.com"
#      secretName: example-com-certificate
  
services:
  identity:
    # Public URI of service
    publicUri: ""
    # License key for identity services
    identityServerLicenseKey: ""
    # License key for AutoMapper
    autoMapperLicenseKey: ""
    
    signingKey:
      # certificate with private and public key in pfx format, by command arg 
      key: ""
      # password of certificate
      password: ""
    
    # set false to prevent deployment
    deploy: true
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "identity-services"
    image:
      repository: meshmakers/octo-mesh-identity-services
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
#      livenessProbe:
#        httpGet:
#          path: /
#          port: http
#      readinessProbe:
#        httpGet:
#          path: /
#          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.
      
      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }    
    
  assetRepository:
    # Public URI of service
    publicUri: ""
    # set false to prevent deployment
    deploy: true
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "asset-rep-services"
    image:
      repository: meshmakers/octo-mesh-asset-rep-services
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
      #      livenessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      #      readinessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.
      
      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }
    
  bot:
    # Public URI of service
    publicUri: ""
    # set false to prevent deployment
    deploy: true
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "bot-services"
    image:
      repository: meshmakers/octo-mesh-bot-services
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
      #      livenessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      #      readinessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.
      
      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }
    
  communication:
    # Public URI of service
    publicUri: ""
    # set false to prevent deployment
    deploy: true
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "communication-controller-services"
    image:
      repository: meshmakers/octo-mesh-communication-controller-services
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
      #      livenessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      #      readinessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
        #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.
      
      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }
        
  adminPanel:
    # Public URI of service
    publicUri: ""
    # set false to prevent deployment
    deploy: true
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "adminpanel"
    image:
      repository: meshmakers/octo-mesh-adminpanel
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
      #      livenessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      #      readinessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.
      
      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }
        
  studio:
    # Public URI of service
    publicUri: ""
    # set false to prevent deployment
    deploy: false
    # when set, the service will be deployed with the given full name
    fullnameOverride: ""
    # the service will be deployed with the given name and chart name
    nameOverride: "refinery-studio"
    image:
      repository: meshmakers/octo-mesh-refinery-studio
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    replicaCount: 1
    podAnnotations: {}
    podLabels: {}
    pod:
      port: 80
      #      livenessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      #      readinessProbe:
      #        httpGet:
      #          path: /
      #          port: http
      resources: {}
        # We usually recommend not specifying default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      # Additional volumes on the output Deployment definition.

      volumes: [ ]
      # - name: foo
      #   secret:
      #     secretName: mysecret
      #     optional: false

      # Additional volumeMounts on the output Deployment definition.
      volumeMounts: [ ]
      # - name: foo
      #   mountPath: "/etc/foo"
      #   readOnly: true
      nodeSelector: { }
      tolerations: [ ]
      affinity: { }